-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,LS0gVm9ydFggSHViIExvYWRlcgpsb2NhbCB2YXJfMjVlNGV3ID0gbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8xbmlnMWh0bWFyZTEyMzQvU0NSSVBUUy9tYWluL09yaW9uLmx1YSIpKSgpCmxvY2FsIHZhcl93enRqejkgPSBPcmlvbkxpYjpNYWtlV2luZG93KHtOYW1lID0gIlZvcnRYIEh1YiB8IExvYWRlciIsIEhpZGVQcmVtaXVtID0gZmFsc2UsIFNhdmVDb25maWcgPSBmYWxzZSwgQ29uZmlnRm9sZGVyID0gIlZvcnRYTG9hZGVyIn0pCgotLSB3bTVzOTYzegpsb2NhbCB2YXJfamVtbGFiID0gImI5Yjg1NzI5OWUyMjIzMmU4NjAzYWYyYTAiCi0tIDVsNW11c3B3CmxvY2FsIHZhcl9ubHo1bGYgPSBmYWxzZQoKLS0gS2V5IFRhYgpsb2NhbCB2YXJfZ3ppd2p1ID0gV2luZG93Ok1ha2VUYWIoe05hbWUgPSAiS2V5IFN5c3RlbSIsIEljb24gPSAicmJ4YXNzZXRpZDovLzYwMjY1NjgxOTgiLCBQcmVtaXVtT25seSA9IGZhbHNlfSkKS2V5VGFiOkFkZFRleHRib3goewogICAgTmFtZSA9ICJFbnRlciBLZXkiLAotLSAyeXdoYnprZwpsb2NhbCBuYm9seTQgPSAxMAogICAgRGVmYXVsdCA9ICIiLAogICAgVGV4dERpc2FwcGVhciA9IGZhbHNlLAotLSBiYndyczViZgogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihWYWx1ZSkKICAgICAgICBpZiBWYWx1ZSA9PSBjb3JyZWN0S2V5IHRoZW4KbG9jYWwgd2d0aXM1ID0gODQKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7Ci0tIHZ0MXA2OHl3CiAgICAgICAgICAgICAgICBOYW1lID0gIlN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJLZXkgaXMgY29ycmVjdCEgU2NyaXB0cyB1bmxvY2tlZC4iLApsb2NhbCB1b2tvYWsgPSA4NgogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzQ0ODMzNDU5OTgiLAogICAgICAgICAgICAgICAgVGltZSA9IDMKbG9jYWwga2k3djV6ID0gMzgKICAgICAgICAgICAgfSkKLS0gMnY5Z3gxbDYKICAgICAgICAgICAgaXNLZXlWYWxpZCA9IHRydWUKLS0gemluZGJnazkKICAgICAgICBlbHNlCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewpsb2NhbCB4NHhoN2sgPSA4OQogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCmxvY2FsIHp6MmgwbSA9IDkxCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIkludmFsaWQga2V5LCB0cnkgYWdhaW4uIiwKLS0gbzU2dWhoOXIKICAgICAgICAgICAgICAgIEltYWdlID0gInJieGFzc2V0aWQ6Ly83NzMzNjU4NTA0IiwKICAgICAgICAgICAgICAgIFRpbWUgPSAzCiAgICAgICAgICAgIH0pCiAgICAgICAgZW5kCiAgICBlbmQKfSkKLS0gNnFkZnRyeGUKbG9jYWwgODI2NHJoID0gNTYKCi0tIFNjcmlwdCBTZWxlY3Rpb24gVGFiCmxvY2FsIHZhcl9saDlyZHYgPSBXaW5kb3c6TWFrZVRhYih7TmFtZSA9ICJTY3JpcHQgU2VsZWN0b3IiLCBJY29uID0gInJieGFzc2V0aWQ6Ly82MDI2NTY4MjE3IiwgUHJlbWl1bU9ubHkgPSBmYWxzZX0pCgotLSA3NXk2bm84bApTY3JpcHRUYWI6QWRkQnV0dG9uKHsKLS0gcHpzNGswb2wKICAgIE5hbWUgPSAiR3JvdyBBIEdhcmRlbiIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKbG9jYWwgbG9wdHluID0gNTMKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KLS0gd2xhNmNqam8KICAgICAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9aeXFSdWxOYWZWZXhNaXBUL1VOSVZFUlNBTC9tYWluL2dyb3cubHVhIikpKCkKLS0ganpiZm5maXAKICAgICAgICBlbHNlCi0tIHV1aXE3NXRzCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSB1NGxpcTlndgogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MzM2NTg1MDQiLAotLSBlOGR5d21ubAogICAgICAgICAgICAgICAgVGltZSA9IDMKICAgICAgICAgICAgfSkKLS0gandvNDVlc2UKICAgICAgICBlbmQKLS0gZHJlbHVlcG0KICAgIGVuZAp9KQotLSA4c3AzeGUxZwoKU2NyaXB0VGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIkV2YWRlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQpsb2NhbCB3YTB5YmwgPSAyNQogICAgICAgIGlmIGlzS2V5VmFsaWQgdGhlbgogICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vZXZhZGUubHVhIikpKCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewotLSB1c3RlYXY5cwogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSBqcHo3YW9hNwogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MzM2NTg1MDQiLAotLSBncTEyZzZyNAogICAgICAgICAgICAgICAgVGltZSA9IDMKLS0gaDg5bmJ6d3QKICAgICAgICAgICAgfSkKICAgICAgICBlbmQKbG9jYWwgMmgyZ2ttID0gMjkKICAgIGVuZAotLSB4a3c5Z3JvZwp9KQotLSB1dHgzZG50ZApsb2NhbCBhYzI2bjEgPSA0NAoKU2NyaXB0VGFiOkFkZEJ1dHRvbih7Ci0tIHIxNWs1dWdpCmxvY2FsIHplMW12ZCA9IDQxCiAgICBOYW1lID0gIkJpZyBCcmFpbiIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9iaWdicmFpbi5sdWEiKSkoKQogICAgICAgIGVsc2UKbG9jYWwgM21iZHEyID0gOTMKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7Ci0tIGFpZWg4NmN2CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKLS0gNTllMW94MGgKbG9jYWwgdWc4c3JxID0gMTcKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgZW5kCi0tIGV5Z3lmdGxsCn0pCgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKLS0gMjBnN2V3N3gKICAgIE5hbWUgPSAiU3RlYWwgQSBCbHVlbG9jayIsCi0tIGQ5NjM3OGlnCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KLS0gazF0cDU4aW0KICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9ibHVlbG9jay5sdWEiKSkoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7Ci0tIGs3cjB5YWRuCmxvY2FsIDFsaG1zaiA9IDgyCiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKLS0gb2w2bXF5N3EKbG9jYWwgbWI4c3FzID0gMjcKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCi0tIDM1dDZ2bWNoCmxvY2FsIGcyYjV1bCA9IDQ1CiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZAotLSB1cHFnNmlocQpsb2NhbCBlaW5wYXAgPSA0NwogICAgZW5kCn0pCgotLSB1cmRoZWd0bgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiRGFob29kIiwKLS0gMjA4dzc2bjgKbG9jYWwgZTA5ejRpID0gOTgKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGlmIGlzS2V5VmFsaWQgdGhlbgpsb2NhbCA5NmYwb3ogPSA0OAogICAgICAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9aeXFSdWxOYWZWZXhNaXBUL1VOSVZFUlNBTC9tYWluL2RhaG9vZC5sdWEiKSkoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7Ci0tIHZmYnN6dWJyCmxvY2FsIGRuNzN1aiA9IDQ3CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCi0tIHAwM3p1NzFlCmxvY2FsIDE2dTlmbiA9IDE3CiAgICAgICAgICAgICAgICBUaW1lID0gMwpsb2NhbCB4ZDh2NnYgPSA2OQogICAgICAgICAgICB9KQogICAgICAgIGVuZApsb2NhbCBlem1wc20gPSAzMwogICAgZW5kCi0tIGY2Nzhxcmh3Cn0pCmxvY2FsIGhmcTFxMCA9IDM3CgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiVGhhIEJST05YIDMiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCi0tIGhmaGU2bzZlCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vYnJvbngzc291dGgubHVhIikpKCkKLS0gMWlyZW1ybnAKICAgICAgICBlbHNlCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewotLSA5ZHdubmhyZwogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSBub3Fmdmp4dQogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MzM2NTg1MDQiLAogICAgICAgICAgICAgICAgVGltZSA9IDMKLS0gZmZoZ3h5dGoKbG9jYWwgYnBjOTZyID0gNDYKICAgICAgICAgICAgfSkKICAgICAgICBlbmQKICAgIGVuZAp9KQoKU2NyaXB0VGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIkRlYWQgUmFpbHMiLAotLSB2anJtZ3FsdApsb2NhbCBkYmE2dXkgPSAzNAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vZGVhZHJhaWwubHVhIikpKCkKLS0gdWFzemRlbnIKICAgICAgICBlbHNlCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewpsb2NhbCA5bjk2ZTMgPSA5NAogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCi0tIHozMnhtOGlrCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSA1YmdkMjN0ZQpsb2NhbCB3YndxY3QgPSA5CiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZApsb2NhbCBicnF5cTMgPSA0MgogICAgZW5kCi0tIDhibGk1OWp2Cn0pCgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKLS0gdm1udjNxcjkKICAgIE5hbWUgPSAiRG9vcnMiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCi0tIGUwMjF1ZXdiCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vZG9vci5sdWEiKSkoKQogICAgICAgIGVsc2UKbG9jYWwgbHhqMGdiID0gMzEKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwotLSBrb2Vwcng5cQogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgZW5kCn0pCgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiMS4wMDAuMDAwIEp1bXAgUm9wZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKLS0ga2w0N3JybGgKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KbG9jYWwgbndiMGdnID0gNTAKICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9qdW1wcm9wZS5sdWEiKSkoKQpsb2NhbCAydXhkMWggPSA3NQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7Ci0tIHoyZ2RtNGE2CmxvY2FsIGplbHN6ZyA9IDE1CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCi0tIGV5OGNtaG5pCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgZW5kCn0pCgotLSBsam94NDd2aApTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiQnVpbGQgQSBQbGFuZSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKbG9jYWwgdTlhYmxuID0gMjkKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KLS0gdXFjeGhtZ2oKICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9wbGFuZS5sdWEiKSkoKQotLSBnMHFqZDc0OQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKLS0gM3dpbmFmZG4KICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCi0tIHdzNnFseWJnCmxvY2FsIHRpbDF1ZyA9IDQwCiAgICAgICAgICAgICAgICBUaW1lID0gMwotLSB3dm40MHh1YQogICAgICAgICAgICB9KQogICAgICAgIGVuZAotLSA5NnRpZTJqZwogICAgZW5kCn0pCgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiTXVzY2xlIExlZ2VuZHMiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCi0tIDRpNmE0dWhmCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCi0tIGNpZWxqejAzCmxvY2FsIGoyaTkwdiA9IDgwCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vbXVzY2xlLmx1YSIpKSgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBPcmlvbkxpYjpNYWtlTm90aWZpY2F0aW9uKHsKLS0gbWhsYmcyNmsKICAgICAgICAgICAgICAgIE5hbWUgPSAiRXJyb3IiLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJQbGVhc2UgZW50ZXIgY29ycmVjdCBrZXkgZmlyc3QuIiwKLS0gNmZlNGNvZG8KbG9jYWwgbnVyMndoID0gODEKICAgICAgICAgICAgICAgIEltYWdlID0gInJieGFzc2V0aWQ6Ly83NzMzNjU4NTA0IiwKICAgICAgICAgICAgICAgIFRpbWUgPSAzCi0tIGFld3ZzYWFqCiAgICAgICAgICAgIH0pCmxvY2FsIHhmOXU0MyA9IDkyCiAgICAgICAgZW5kCiAgICBlbmQKLS0gOXF2bjl4czIKfSkKClNjcmlwdFRhYjpBZGRCdXR0b24oewogICAgTmFtZSA9ICJQZXRzIEdvIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQpsb2NhbCBzbTgxeXkgPSA0MwogICAgICAgIGlmIGlzS2V5VmFsaWQgdGhlbgogICAgICAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9aeXFSdWxOYWZWZXhNaXBUL1VOSVZFUlNBTC9tYWluL3BldHNnby5sdWEiKSkoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwpsb2NhbCBvbWQzYzcgPSAxMwogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgZW5kCi0tIGVnZWNzYjc5Cn0pCgpTY3JpcHRUYWI6QWRkQnV0dG9uKHsKICAgIE5hbWUgPSAiVGhlIFN0cm9uZ2VzdCBCYXR0bGVncm91bmQiLAotLSBnYzd1emV1cgogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vdGhlc3Ryb25nZXN0Lmx1YSIpKSgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBPcmlvbkxpYjpNYWtlTm90aWZpY2F0aW9uKHsKICAgICAgICAgICAgICAgIE5hbWUgPSAiRXJyb3IiLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJQbGVhc2UgZW50ZXIgY29ycmVjdCBrZXkgZmlyc3QuIiwKICAgICAgICAgICAgICAgIEltYWdlID0gInJieGFzc2V0aWQ6Ly83NzMzNjU4NTA0IiwKICAgICAgICAgICAgICAgIFRpbWUgPSAzCiAgICAgICAgICAgIH0pCmxvY2FsIGY2NzBzNiA9IDIKICAgICAgICBlbmQKbG9jYWwgM2t2NmxxID0gOTIKICAgIGVuZAotLSAyNGhvcG44NQp9KQoKU2NyaXB0VGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gIlRhbmsgR2FtZSBTaW11bGF0b3IiLApsb2NhbCB2YXNqMG0gPSAyNwogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCi0tIGF4bHRlbXZqCiAgICAgICAgaWYgaXNLZXlWYWxpZCB0aGVuCiAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1p5cVJ1bE5hZlZleE1pcFQvVU5JVkVSU0FML21haW4vdGFua2dhbWUubHVhIikpKCkKICAgICAgICBlbHNlCmxvY2FsIGF3YW0yYiA9IDU5CiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCi0tIHNxbmIzNjMwCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSByY3g1NWplOQogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MzM2NTg1MDQiLAogICAgICAgICAgICAgICAgVGltZSA9IDMKICAgICAgICAgICAgfSkKLS0gaTFhcHdpN3EKICAgICAgICBlbmQKICAgIGVuZAp9KQoKU2NyaXB0VGFiOkFkZEJ1dHRvbih7CiAgICBOYW1lID0gImVnZyBmYXJtIiwKLS0geW9uOHIyMngKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQotLSA0YTZ2ODZoeAogICAgICAgIGlmIGlzS2V5VmFsaWQgdGhlbgogICAgICAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9aeXFSdWxOYWZWZXhNaXBUL1VOSVZFUlNBTC9tYWluL2VnZ2Zhcm0ubHVhIikpKCkKICAgICAgICBlbHNlCmxvY2FsIHFhdmcwZyA9IDYzCiAgICAgICAgICAgIE9yaW9uTGliOk1ha2VOb3RpZmljYXRpb24oewpsb2NhbCBjZWs0cW4gPSA4NwogICAgICAgICAgICAgICAgTmFtZSA9ICJFcnJvciIsCi0tIHNlaDdlZzd5CiAgICAgICAgICAgICAgICBDb250ZW50ID0gIlBsZWFzZSBlbnRlciBjb3JyZWN0IGtleSBmaXJzdC4iLAotLSBraHFmY2k2ZQogICAgICAgICAgICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MzM2NTg1MDQiLAogICAgICAgICAgICAgICAgVGltZSA9IDMKICAgICAgICAgICAgfSkKLS0gaTVxbXY1MWoKICAgICAgICBlbmQKLS0gMjZ2OHBwYTIKICAgIGVuZAotLSBiZ2o2dnVlOQp9KQoKLS0gbHJnNXhqYm4KU2NyaXB0VGFiOkFkZEJ1dHRvbih7Ci0tIDYwY3MxemQxCiAgICBOYW1lID0gIkJpZyBCcmFpbiIsCmxvY2FsIGVzbTgwZyA9IDIxCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9iaWdicmFpbi5sdWEiKSkoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKbG9jYWwgem9uMmN4ID0gNAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJQbGVhc2UgZW50ZXIgY29ycmVjdCBrZXkgZmlyc3QuIiwKLS0geXFiNXJ2b2cKICAgICAgICAgICAgICAgIEltYWdlID0gInJieGFzc2V0aWQ6Ly83NzMzNjU4NTA0IiwKLS0gZnk5eGtqenMKICAgICAgICAgICAgICAgIFRpbWUgPSAzCi0tIHFseGwzcnJmCiAgICAgICAgICAgIH0pCiAgICAgICAgZW5kCiAgICBlbmQKLS0gYnJrcmQ4bjUKfSkKCi0tIDdiMTMzZ3pxClNjcmlwdFRhYjpBZGRCdXR0b24oewotLSBpN3Rodzd5dwogICAgTmFtZSA9ICJHdWJieSIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKLS0gdDRyNXNoNjQKICAgICAgICBpZiBpc0tleVZhbGlkIHRoZW4KICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWnlxUnVsTmFmVmV4TWlwVC9VTklWRVJTQUwvbWFpbi9ndWJieS5sdWEiKSkoKQotLSAxaGN3dm15dAogICAgICAgIGVsc2UKLS0gZGx0MnM2aXIKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZApsb2NhbCB6NjhucnQgPSA5NAogICAgZW5kCmxvY2FsIHU4NmluYyA9IDU5Cn0pCmxvY2FsIG5kZm9hbCA9IDI0Cgpsb2NhbCB2OGpwbGUgPSAyClNjcmlwdFRhYjpBZGRCdXR0b24oewogICAgTmFtZSA9ICJQaXp6YSBGYWN0b3J5IiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGlmIGlzS2V5VmFsaWQgdGhlbgogICAgICAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9aeXFSdWxOYWZWZXhNaXBUL1VOSVZFUlNBTC9tYWluL3BpenphZmFjdG9yeS5sdWEiKSkoKQpsb2NhbCAxeWphdjQgPSAzNAogICAgICAgIGVsc2UKbG9jYWwgZnl3NWpjID0gNDAKICAgICAgICAgICAgT3Jpb25MaWI6TWFrZU5vdGlmaWNhdGlvbih7CmxvY2FsIGY0OWFlZyA9IDM5CiAgICAgICAgICAgICAgICBOYW1lID0gIkVycm9yIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGNvcnJlY3Qga2V5IGZpcnN0LiIsCiAgICAgICAgICAgICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNzczMzY1ODUwNCIsCiAgICAgICAgICAgICAgICBUaW1lID0gMwogICAgICAgICAgICB9KQpsb2NhbCBmNDA3MWIgPSAyMAogICAgICAgIGVuZAogICAgZW5kCn0pCmxvY2FsIDJtcWp4MCA9IDM3CgpPcmlvbkxpYjpJbml0KCkKbG9jYWwgN3owbTF6ID0gOQ=='))()
